# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/entrances", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Entrance. As you add validations to Entrance, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: "Entrance" } }

  let(:invalid_attributes) { { name: "" } }

  describe "GET /index" do
    before do
      create_pair(:entrance)
      get api_v1_entrances_url
    end

    it "renders a successful response" do
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET /show" do
    let!(:entrance) { create :entrance, name: "Entrance A" }

    before { get api_v1_entrance_url(entrance) }

    it "renders a successful response" do
      expect(response).to have_http_status(:success)
      json = response.parsed_body
      expect(json["name"]).to eq("Entrance A")
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Entrance" do
        expect do post api_v1_entrances_url, params: { entrance: valid_attributes } end.to change(
          Entrance,
          :count
        ).by(1)
      end

      it "returns a created status" do
        post api_v1_entrances_url, params: { entrance: valid_attributes }
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Entrance" do
        expect do post api_v1_entrances_url, params: { entrance: invalid_attributes } end.not_to change(
          Entrance,
          :count
        )
      end

      it "renders a response with 422 status" do
        post api_v1_entrances_url, params: { entrance: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    let!(:entrance) { create :entrance }
    let(:new_attributes) { { name: "Entrance2" } }

    context "with valid parameters" do
      it "updates the requested api_v1_entrance" do
        expect { patch api_v1_entrance_url(entrance), params: { entrance: new_attributes } }.to(
          change { entrance.reload.name }.to("Entrance2")
        )
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status" do
        patch api_v1_entrance_url(entrance), params: { entrance: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:entrance) { create :entrance }

    it "destroys the requested api_v1_entrance" do
      expect { delete api_v1_entrance_url(entrance) }.to change(Entrance, :count).by(-1)
    end
  end
end
